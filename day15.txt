Day15

1. Collection Framework
(1) 개요
    코딩 중에 객체(기본형 포함) 여러 개를
    저장하고 꺼내쓰는 경우가 빈번
    => 가장 간단하게 구현한 것은 배열 []

    배열 선언 방법
        데이터타입[] 배열명 = new 데이터타입[개수];
        int[] scores = new int[5];
        Puppy[] puppies = new Puppy[101];

    배열은 전체 개수를 알고 있고 정해져 있을 때는 사용이 매우 편리
    전체 개수를 모르거나, 변경 가능할 때
    - 매번 생성 시 1000개씩 만들자 => 공간 낭비
    - 배열에서 데이터를 지우면 그 공간은 빈 자리
    => 배열의 알려진 문제점 + 잘 알려진 데이터 구조
       데이터의 추가/삭제/검색이 편리하도록
       java.util 패키지 내에 여러 개의 인터페이스와 클래스를 추가
    => 이를 컬렉션 프레임워크라고 부른다.

(2) List
    - 객체를 일렬로 늘어놓은 구조
    - 객체를 인덱스로 관리
    - 객체를 저장하면 인덱스를 자동으로 부여
    - 인덱스로 객체 검색, 삭제, 변경 가능

    * 대표적인 리스트
    ArrayList, Vector, LinkedList

    ArrayList : 가장 일반적인 리스트
                장점 - 특정한 인덱스로 바로 찾아감
                단점 - 중간에 데이터가 추가되거나 삭제되는 경우
                       데이터 이동이 발생한다.

    Vector : 요새 잘 안씀, 설명 생략

    LinkedList : 저장공간(노드라 부름)이 2부분이며 
                 (다음데이터의 주소)와 데이터를 보관한다.
                 장점 : 데이터 추가 / 삭제에 매우 편리하고 빠름
                 단점 : 인덱스를 통한 데이터 조회에 취약
                 => 알고리즘 개발에 많이 쓰임

=> ListCollection.java                 

(3) Set
    - 집합, 복주머니 속의 구슬
    - 중복을 허락하지 않음
    - 저장순서를 보장하지 않음
    - 데이터 검색 속도가 매우 빠름
    - 대표적인 클래스는 HashSet, TreeSet
=> SetCollection.java

(4) Map
    - Key:Value로 구성된 Entry
    - {name}: {James}, {age}: 25
    - REST API에서 사용하는 구조와 유사(JSON)
    - Key는 중복 저장 안됨, Value는 중복 가능
=> MapCollection.java    
