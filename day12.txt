Day12

1.인터페이스(Interface)
    (1) 사전적 의미
        하나의 시스템을 구성하는 두 개의 요소 또는
        서로 다른 시스템간의 상호 작용을 이루는 경계
        하드웨어/소프트웨어/조건/규약 등을 포괄적으로 칭함

    (2)Java에서의 인터페이스
        프로그램과 프로그램을 연결하는 것
        한 마디로 요약하면 [규제]
        특정한 규약에 의해 개발되도록 하는 목적
        클래스가 인터페이스를 이용하려면 ""반드시"
        인터페이스가 규정한 메서드들을 모두 다 구현해야 한다.
        인터페이스가 메서드를 구현하지 않으면 컴파일도 안된다.

    (3) 왜 만들었을까?
        계산기 프로그램 개발 프로젝트
        계산기 클래스는 A개발자가, 응용 프로그램은 B개발자가 개발

        동시에 개발을 하다보니 B는 A가 개발할 모습을 예측하여 개발 진행
        그런데 나중에 통합 테스트를 하려다 보니...
        A는 add(a, b)라고 개발했는데,
        B는 add(a[])로 예상하고 개발함
        => 폭망
        => Tomas Wujec : Build a tower, Build a team

    (4) 사용법
        [public] interface 인터페이스명 {
                [public][static][final] 자료형 상수명 = 값;
                [public] 리턴타입 메서드명 (인자);
                [public] default 리턴타입 메서드명(인자){
                    메서드 내용;
            }
                [public] static 리턴타입 메서드명(인자){
                    메서드 내용;
            }
        }

        class 클래스명 implementes 인터페이스명 {

        }
        * 클래스를 생성할때 가장 복잡한 형태
        class 클래스명 extends 부모 implementes 인터1, 인터2, .....
        throws Exception

    (5) 예제
        interface Interface1{
            public void myMethod1(int a);
        }

        class CLass1 implementes Interface1(int aaa){
            public int myMethod1(){
                return 0;
            }
        }

    (6) 인터페이스의 특징
        - 상속과 구현은 완전히 다르다.
        - 상속은 부모 클래스의 기능을 자식이 물려받는 것
          구현은 자식이 반드시 만들도록 강제
        - 클래스 선언은 class
          인터페이스 선언은 interface
        - 클래스 상속은 extends
          인터페이스 구현은 implementes 

    (7) 인터페이스 구현 특이사항
        1) 하나의 클래스가 여러 개의 인터페이스 구현가능
            interface I1 {void x();}
            interface2 I2 {void y();}

            class C1 implementes I1, I2 {
                void x(){   }
                void y(){   }
            }

        2) 인터페이스도 상속이 된다.
            interface I3 {void x();}
            interface I4 extends I3{
                void y();
            }

            class C2 implementes I4 {
                void x(){   }
                void y(){   }
            }

    => CalculatorI.java, Calculator.java, CalApp.java -> {실습 이클립스 확인}

    (8) Headaches 
        1) default, static : Java8 부터 만들어짐
        2) default : 메서드를 인터페이스가 만듦
           static : 구현하지 않아도 사용가능
        3) default와 static은 왜 만들어졌을까?
            * 예) 메서드 선언이 600개가 있던 자바의 인터페이스
                 많은 기업들이 이 인터페이스로 개발 구축 완료
                 Java가 업데이트 되면서 400개 메서드 추가
                 => 아무도 업데이트를 안함
                 => 개발이 끝나면 이미 운영 중
                 => 불만도 없어 인력도 없어 => 개발을 왜함?
                 => 400개의 메서드를 Java 회사가 만듦
                 => 바꾸려면 바꿀 수 있음

    (9) 인터페이스의 사용
        클래스와의 사용 불분명(모호함)으로 호난
        Spring의 MyBatis에서 java와 SQL(Mapper) 역할 분리
        jav에서는 인터페이스를 만들고 메서드는 이름만 부여
        SQL xml에서 이름에 메핑되는 SQL을 작성함
        => java에서는 구현하지 않았기 때문에
            interface의 기본ㄴ 사항에 완벽하게 맞음
    
    => MyInterface.java, MyClass.java




